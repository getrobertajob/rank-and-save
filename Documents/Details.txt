
Write a JavaScript React App named "Rank & Save".  The root folder structure will contain 2 folders, client, and server. The server folder will contain a server side API and the client folder will contain the rest of the app. The API has the standard folder structer and files for a javascript react app with folders for a model file, controller file, a config file for connection to the MongoDB, and a routes folder. The API needs to be capable of creating a new record, reading all records, updating records, and deleting records. The model consists of "Title" as a string, "Author"as a string, "Votes" as a number. The controller needs to have a function for creating a new record, a function for reading all records order by Votes from highest to lowest, a function for updating a single record, a function for deleting a single record. The API connects to a MongoDB with a database named "MST" with the connection string of " mongodb+srv://robert_lute:mongodbpw@cluster0.5rb02on.mongodb.net/ ".

In the client folder will reside the rest of the App. The "App.jsx" file will only reference all components. The home page will consist of 3 components. At the top center of the app is the "Banner.jsx" component. It primarily consists of a wide banner image. In the "App.jsx" file the next 2 components is the "Table.jsx" and "Form.jsx" components. They are displayed side by side. On the left side is the "Table.jsx" component and on the right side is the "Form.jsx" component. The "Table.jsx" component comprised of an HTML table. The headers are "Rank", "Title", "Author", and "Votes".      When the table loads it connects with the MongoDB database and grabs the data for each column. The Rank columnnot stored in the database. Instead the rank columndisplays a number variable that is incremented from 1 upwards. So the first row of data displays the rank value as "1" and the seconds row in the table displays the rank value as "2", and so on. The rest of the columnare stored inside the database. According to the API model file the "Title" column is stored in the database as "Title", the "Author" is stored in the database as "Author", and the "Votes" are "Votes". When the App gets the data from the database for the table it gets all records and in order by Votes from highest value to lowest. Instead of dispaying the "Votes" value in the table it displays two arrows. One arrow pointing upward with a green color and another arrow pointing downward with a red color. When a user clicks on the upward pointing green arrow it updates the record for that row by incrementing the "Votes" value by 1. If the user clicks on the downward pointing red arrow it updates the record for that row by deincrementing the "Votes" value down by 1. It then refreshes the data for the table. Each row has a hover effect so that when the cursor is over that table row it has a thick yellow border. When a user clicks on the title then it connects with the database, gets the data for the record associated for that row, and adds that data to the inputes in the form. For example when a user clicks on the title in the first row, the title value will be set as the value for the "Title" input in the form, the author value will be set as the value for the "Author" input, and the description for that record will be set as the value for the "Decription" input in the form. When the user click on the title of a row in the table it also sets the "New" button in the form to enabled, the "Edit" button to enabled, the "Delete" button to disabled, and the "Save" button to disabled. It also sets all the inputs in the form to not editable with white backgrounds.

The next component is the "Form.jsx" component which consist of form. At the top of the form is a horizontal row of 4 buttons, New, Edit, Delete, and Save. Below that row of buttons is the  title label that reads "Title:" and a text input associated to the title label positioned to right of the label. Below that is a the author label that reads "Author:" and a text input associated to the author label positioned to right of the label. Below that is the description label and positioned below the description label a textarea input that is associated to the description label. Both the title and author labels and inputs are justified to the right side. The description label is justified to the left. When the page first loads the "New" button is enebled, but the "Edit", "Delete", and "Save" buttons are disabled and greyed out. When the user clicks on the "New" button it clears out any text in all the inputs in the form just in case there is any text inside of them at the moment and afterwards it also sets the inputs to be editable with light blue backgrounds. When the user click on the "New" button it also sets the "Save" button to enabled, the "Edit" button to disabled, the "Delete" button to disabled, and the "New" button to disabled. When the user clicks on the "Edit" button it sets all the inputs in the form to be editable and have light blue backgrounds. Also when the user clicks on the "Edit" button it sets the "Edit" button to be disabled, the "Delete" button to be enabled, the "Save" button to be enabled.  When a user clicks on the "Delete" button it removes the record from the database with a "Title" value that matches the value in the "Title" input and then clears the text in all the inputs of the form and sets the inputs to have a white background and updates the table with the newest data. Clicking on the "Delete" button also sets the "New" button to be enabled, the "Edit" button to be disabled, "Delete" button to be disabled, and "Save" button to be disabled. The APP also tracks if the data in the form inputs was loaded by the user clicking on the table or if the user clicked on the "New" button and then typed text into the inputs. If the data came from the user clicking on the table then when the user clicks on the "Save" button it will update the record in the database associated with that data. If the data came from the user recently clicking on the "New" button and then typing text into the inputs then it will use the API to create a new record. Upon sucessfully either updating a record in the database or creating a new record the App presents the user with a popup that reads "Save was successful". Afterwards the app refreshes the table data with the newest records from the database. 
